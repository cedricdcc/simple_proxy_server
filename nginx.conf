events {}

http {
    resolver 8.8.8.8 ipv6=off;  # Use a DNS resolver and disable IPv6

    # Define maps to handle redirects
    map $upstream_http_location $redirect_location {
        default "";
        "~^(https?://.*)$" $upstream_http_location;
    }

    map $redirect_location $final_redirect_location {
        default "";
        "~^https?://(.*)$" "https://docker-dev.vliz.be:5301/$1";
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name docker-dev.vliz.be www.docker-dev.vliz.be;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name docker-dev.vliz.be www.docker-dev.vliz.be;

        ssl_certificate /etc/ssl/certs/www.docker-dev.vliz.be.crt;
        ssl_certificate_key /etc/ssl/private/www.docker-dev.vliz.be.key;

        ssl_protocols TLSv1.3;
        ssl_prefer_server_ciphers on;
        # Uncomment the following line if you have a Diffie-Hellman parameter file
        # ssl_dhparam /etc/nginx/dhparam.pem;
        ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
        ssl_ecdh_curve secp384r1;
        ssl_session_timeout  10m;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        location / {
            set $target_url $uri;

            # Log the original URI
            add_header X-Debug-Original-URI $uri;

            # Extract the protocol and the rest of the URL
            if ($target_url ~* "(https?):/(.*)") {
                set $protocol $1;
                set $rest_of_url $2;
                set $target_url "$protocol://$rest_of_url";
            }

            # Log the target URL
            add_header X-Debug-Target-URL $target_url;

            proxy_pass $target_url;

            proxy_ssl_server_name on;  # Enable SSL/TLS for proxy_pass
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Intercept redirects and rewrite the Location header
            proxy_intercept_errors on;

            error_page 500 502 503 504 = @handle_500_errors;
            error_page 301 302 = @handle_redirects;

            # Remove any existing CORS headers from the upstream response
            proxy_hide_header Access-Control-Allow-Origin;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

            # Handle preflight requests
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD';
                add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Handle HEAD requests
            if ($request_method = HEAD) {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD';
                add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                return 200;
            }

            # Add logging for debugging
            access_log /dev/stdout;
            error_log /dev/stderr debug;
        }

        location @handle_500_errors {
            internal;
            proxy_pass $target_url;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location @handle_redirects {
            internal;
            proxy_pass $target_url;
            proxy_intercept_errors on;
            error_page 301 302 = @handle_redirects;

            # Rewrite the Location header to follow the docker-dev.vliz.be:5301 domain
            proxy_redirect ~^(http://|https://)(.*)$ https://docker-dev.vliz.be:5301/$2;

            # Log the new target URL
            add_header X-Debug-Redirect-Location $final_redirect_location;

            # Recursively follow the redirect
            if ($final_redirect_location != '') {
                return 301 $final_redirect_location;
            }

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
        }
    }
}